# -*- coding: utf-8 -*-
"""LiveTrendCatcher$

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Lq3e-sRZEYfvDhgTh-0YkzkvegQmolBl
"""

from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
import webbrowser
from kivy.clock import Clock
import requests
import threading
import json
import time
import urllib.parse  # Import urllib.parse for URL encoding

# API Base URL for Streamlit + FastAPI Backend
API_BASE_URL = "http://localhost:8000"
RETRY_DELAY = 5  # Delay in seconds before retrying a failed API request
REFRESH_INTERVAL = 10  # Auto-refresh interval in seconds

# Define the timeframes you want to display
TIMEFRAMES = {
    "1m": "1",  # TradingView interval codes
    "5m": "5",
    "15m": "15",
    "30m": "30",
    "1h": "60",
}

class StockMonitor(BoxLayout):
    def __init__(self, **kwargs):
        super().__init__(orientation='vertical', **kwargs)

        self.stock_symbol_input = TextInput(hint_text='üîé Enter Stock Symbol', size_hint=(0.7, 0.1))
        self.add_widget(self.stock_symbol_input)

        self.track_button = Button(text='üìà Track', size_hint=(0.3, 0.1))
        self.track_button.bind(on_press=self.track_stock)
        self.add_widget(self.track_button)

        self.stock_labels = {}  # Store labels for multiple stocks
        self.chart_links = {}   # Store TradingView chart links (symbol -> URL)
        self.remove_buttons = {}  # Store remove buttons
        self.tracking_symbols = set()
        self.error_label = Label(text='', size_hint=(1, 0.05), color=(1, 0, 0, 1))
        self.add_widget(self.error_label)

        Clock.schedule_interval(self.auto_refresh_prices, REFRESH_INTERVAL)

    def track_stock(self, instance):
        symbol = self.stock_symbol_input.text.upper().strip()
        if symbol and symbol not in self.tracking_symbols:
            self.tracking_symbols.add(symbol)

            layout = BoxLayout(orientation='horizontal', size_hint=(1, 0.1))
            label = Label(text=f'üìä {symbol}: ‚è≥ Fetching...', size_hint=(0.6, 1))
            self.stock_labels[symbol] = label
            layout.add_widget(label)

            remove_button = Button(text='üóë', size_hint=(0.2, 1))
            remove_button.bind(on_press=lambda btn, s=symbol: self.remove_stock(s))
            self.remove_buttons[symbol] = remove_button
            layout.add_widget(remove_button)

            self.add_widget(layout)
            threading.Thread(target=self.open_tradingview, args=(symbol,)).start()
            threading.Thread(target=self.fetch_and_update_price, args=(symbol,)).start()
        else:
            self.error_label.text = '‚ö†Ô∏è Please enter a valid stock symbol or avoid duplicates.'

    def open_tradingview(self, symbol):
        try:
            chart_url = f'https://www.tradingview.com/chart/?symbol={urllib.parse.quote_plus(symbol)}&interval=5'
            webbrowser.open(chart_url)
            self.chart_links[symbol] = chart_url
        except Exception as e:
            print(f"Error opening TradingView for {symbol}: {e}")

    def fetch_stock_price_from_api(self, symbol):
        try:
            url = f"{API_BASE_URL}/get_price?symbol={symbol}"
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            data = response.json()
            return float(data.get("price", "N/A"))
        except (requests.exceptions.RequestException, ValueError, json.JSONDecodeError) as e:
            print(f"API Error for {symbol}: {e}")
            return "Error: Fetch Failed ({type(e).__name__})"

    def fetch_and_update_price(self, symbol):
        price = self.fetch_stock_price_from_api(symbol)
        Clock.schedule_once(lambda dt: self.update_label(symbol, price))

    def auto_refresh_prices(self, dt):
        for symbol in self.tracking_symbols:
            threading.Thread(target=self.fetch_and_update_price, args=(symbol,)).start()

    def update_label(self, symbol, price):
        if symbol in self.stock_labels:
            self.stock_labels[symbol].text = f"üìä {symbol}: üí≤{price:.2f}" if isinstance(price, float) else f"‚ö†Ô∏è {symbol} Price: {price}"

    def remove_stock(self, symbol):
        if symbol in self.tracking_symbols:
            self.tracking_symbols.remove(symbol)
            label = self.stock_labels.pop(symbol, None)
            if label:
                self.remove_widget(label)

            remove_button = self.remove_buttons.pop(symbol, None)
            if remove_button:
                self.remove_widget(remove_button)

            self.chart_links.pop(symbol, None)

class LiveTrendCatcherApp(App):
    def build(self):
        return StockMonitor()

if __name__ == '__main__':
    LiveTrendCatcherApp().run()